#user  nobody;
worker_processes  1;


events {
    worker_connections  1024;
}


http {
    #include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;

    keepalive_timeout  65;

    #gzip  on;

    upstream analytic {
        server 127.0.0.1:5000;
    }

    push_stream_shared_memory_size                100m;
    push_stream_max_channel_id_length             200;
    # max messages to store in memory
    push_stream_max_messages_stored_per_channel   20;
    # message ttl
    push_stream_message_ttl                       5m;
    # ping frequency
    push_stream_ping_message_interval             1s;
    # connection ttl to enable recycle
    push_stream_subscriber_connection_ttl         15m;
    # connection ttl for long polling
    push_stream_longpolling_connection_ttl        30s;
    push_stream_timeout_with_body                 off;

    # wildcard
    push_stream_wildcard_channel_prefix         "broad_";
    push_stream_wildcard_channel_max_qtd        3;
    push_stream_message_template                "{\"id\":~id~,\"channel\":\"~channel~\",\"text\":\"~text~\", \"tag\":\"~tag~\", \"time\":\"~time~\", \"eventid\":\"~event-id~\"}";

    server {
        listen       80;

        server_name  localhost;


        location /channels-stats {
            # activate channels statistics mode for this location
            push_stream_channels_statistics;

            # query string based channel id
            push_stream_channels_path             $arg_id;
        }

        location /pub {
            # activate publisher (admin) mode for this location
            push_stream_publisher admin;

            # query string based channel id
            push_stream_channels_path               $arg_id;
        }

        location ~ /sub/(.*) {
            # activate subscriber (streaming) mode for this location
            push_stream_subscriber;

            # positional channel path
            push_stream_channels_path                   $1;

            # header to be sent when receiving new subscriber connection
            push_stream_header_template                 "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-store\">\r\n<meta http-equiv=\"Cache-Control\" content=\"no-cache\">\r\n<meta http-equiv=\"Pragma\" content=\"no-cache\">\r\n<meta http-equiv=\"Expires\" content=\"Thu, 1 Jan 1970 00:00:00 GMT\">\r\n<script type=\"text/javascript\">\r\nwindow.onError = null;\r\ntry{ document.domain = (window.location.hostname.match(/^(\d{1,3}\.){3}\d{1,3}$/)) ? window.location.hostname : window.location.hostname.split('.').slice(-1 * Math.max(window.location.hostname.split('.').length - 1, (window.location.hostname.match(/(\w{4,}\.\w{2}|\.\w{3,})$/) ? 2 : 3))).join('.');}catch(e){}\r\nparent.PushStream.register(this);\r\n</script>\r\n</head>\r\n<body>";
            # message template
            push_stream_message_template                "<script>p(~id~,'~channel~','~text~');</script>";
            # footer to be sent when finishing subscriber connection
            push_stream_footer_template                 "</body></html>";
            # content-type
            default_type                                "text/html; charset=utf-8";
            # ping frequency
            push_stream_ping_message_interval           10s;
        }


        location /raw_videos/local {
            internal; # only allowed for internal redirects
            alias /srv;
            add_header Content-Type video/mp4;
        }

        location / {
             proxy_pass http://analytic;
        }

    }

}
